{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['user_review_count', 'user_useful', 'user_funny', 'user_cool', 'user_fans', 'user_avg_stars', 'business_stars', 'business_review_count', 'review_useful', 'review_funny', 'review_cool', 'review_stars']\n",
      "('Number of observations in the training data:', 258)\n",
      "('Number of observations in the test data:', 242)\n",
      "[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
      " 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]\n",
      "[4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 1 1 1 2 2 5 5 5 1 5 5 5 5 5 2 2 2 2 4\n",
      " 5 5 5 1 1 1 1 3 3 3 3 4 4 5 5 1 1 1 2 4 4 4 4 4 4 4 4 4 5 5 3 3 4 5 5 5 5\n",
      " 5 5 5 5 2 2 2 2 2 4 4 4 3 3 5 5 5 5 5 5 4 4 4 4 3 3 1 1 5 5 5 5 5 2 1 1 1\n",
      " 1 1 1 1 4 4 2 2 2 5 5 5 5 5 5 3 5 5 1 1 5 5 5 5 1 1 1 1 5 5 5 5 5 5 5 4 4\n",
      " 4 4 5 5 5 5 5 5 5 5 5 5 5 3 3 5 4 4 4 4 4 3 3 3 4 5 5 5 5 4 4 4 4 4 1 1 1\n",
      " 5 5 5 1 2 2 2 2 2 5 5 5 5 3 3 5 3 3 3 5 5 5 5 4 2 5 5 5 5 5 4 5 5 5 5 5 3\n",
      " 3 4 2 2 2 5 5 5 5 5 5 5 1 4 4 4 4 2 2 5 5 5 5 4 4 4 4 5 5 5 5 5 5 5 5 5]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[('user_review_count', 0.07296806761239201),\n",
       " ('user_useful', 0.039741377850911502),\n",
       " ('user_funny', 0.0428719546342307),\n",
       " ('user_cool', 0.041120868761064452),\n",
       " ('user_fans', 0.049578353883230362),\n",
       " ('user_avg_stars', 0.088841215408463375),\n",
       " ('business_stars', 0.10657524244752441),\n",
       " ('business_review_count', 0.076163584920498392),\n",
       " ('review_useful', 0.04975147380906552),\n",
       " ('review_funny', 0.012139111960130611),\n",
       " ('review_cool', 0.012564911327073819),\n",
       " ('review_stars', 0.4076838373854148),\n",
       " ('is_train', 0.0)]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load the library with the iris dataset\n",
    "from sklearn.datasets import load_iris\n",
    "\n",
    "# Load scikit's random forest classifier library\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Load pandas\n",
    "import pandas as pd\n",
    "\n",
    "# Load numpy\n",
    "import numpy as np\n",
    "\n",
    "# Set random seed\n",
    "np.random.seed(0)\n",
    "\n",
    "# Create an object called iris with the iris data\n",
    "iris = load_iris()\n",
    "\n",
    "# Create a dataframe with the four feature variables\n",
    "df = pd.DataFrame(iris.data, columns=iris.feature_names)\n",
    "\n",
    "#########################################################################\n",
    "#create dataframe from yelp csv \n",
    "input_file = \"yelp_reviews_min_test.csv\"\n",
    "df2 = pd.read_csv(input_file)\n",
    "# put the original column names in a python list\n",
    "headers = list(df2.columns.values)\n",
    "print(headers)\n",
    "##########################################################################\n",
    "\n",
    "# View the top 5 rows\n",
    "df.head()\n",
    "\n",
    "# Add a new column with the species names, this is what we are going to try to predict\n",
    "df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)\n",
    "\n",
    "# View the top 5 rows\n",
    "df.head()\n",
    "\n",
    "# Create a new column that for each row, generates a random number between 0 and 1, and\n",
    "# if that value is less than or equal to .5, then sets the value of that cell as True\n",
    "# and false otherwise. This is a quick and dirty way of randomly assigning some rows to\n",
    "# be used as the training data and some as the test data.\n",
    "df['is_train'] = np.random.uniform(0, 1, len(df)) <= .5\n",
    "df2['is_train'] = np.random.uniform(0, 1, len(df2)) <= .5\n",
    "\n",
    "# View the top 5 rows\n",
    "df.head()\n",
    "\n",
    "# Create two new dataframes, one with the training rows, one with the test rows\n",
    "train, test = df[df['is_train']==True], df[df['is_train']==False]\n",
    "train2, test2 = df2[df2['is_train']==True], df2[df2['is_train']==False]\n",
    "\n",
    "# Show the number of observations for the test and training dataframes\n",
    "print('Number of observations in the training data:', len(train2))\n",
    "print('Number of observations in the test data:',len(test2))\n",
    "\n",
    "# Create a list of the feature column's names\n",
    "features = df.columns[:4]\n",
    "features2 = df2.columns[:13]\n",
    "\n",
    "# View features\n",
    "features\n",
    "features2\n",
    "\n",
    "# train['species'] contains the actual species names. Before we can use it,\n",
    "# we need to convert each species name into a digit. So, in this case there\n",
    "# are three species, which have been coded as 0, 1, or 2.\n",
    "y = pd.factorize(train['species'])[0]\n",
    "y2 = np.array(train2['review_stars'])\n",
    "#y3 = pd.factorize(train2['business_category'])[0]\n",
    "print(y)\n",
    "print(y2)\n",
    "#print(y3)\n",
    "\n",
    "# View target\n",
    "y\n",
    "y2\n",
    "\n",
    "# Create a random forest Classifier. By convention, clf means 'Classifier'\n",
    "clf = RandomForestClassifier(n_jobs=2, random_state=0)\n",
    "clf2 = RandomForestClassifier(n_jobs=2, random_state=0)\n",
    "\n",
    "# Train the Classifier to take the training features and learn how they relate\n",
    "# to the training y (the species)\n",
    "clf.fit(train[features], y)\n",
    "clf2.fit(train2[features2], y2)\n",
    "\n",
    "# Apply the Classifier we trained to the test data (which, remember, it has never seen before)\n",
    "clf.predict(test[features])\n",
    "clf2.predict(test2[features2])\n",
    "\n",
    "# View the predicted probabilities of the first 10 observations\n",
    "clf.predict_proba(test[features])[0:10]\n",
    "clf2.predict_proba(test2[features2])[0:10]\n",
    "\n",
    "# Create actual english names for the plants for each predicted plant class\n",
    "preds = iris.target_names[clf.predict(test[features])]\n",
    "preds2 = clf2.predict(test2[features2])\n",
    "\n",
    "# View the PREDICTED species for the first five observations\n",
    "preds[0:5]\n",
    "preds2[0:5]\n",
    "\n",
    "# View the ACTUAL species for the first five observations\n",
    "test['species'].head()\n",
    "test2['review_stars'].head()\n",
    "\n",
    "# Create confusion matrix\n",
    "pd.crosstab(test['species'], preds, rownames=['Actual Species'], colnames=['Predicted Species'])\n",
    "pd.crosstab(test2['review_stars'], preds2, rownames=['Actual Review'], colnames=['Predicted Review'])\n",
    "print(preds2)\n",
    "\n",
    "# View a list of the features and their importance scores\n",
    "list(zip(train[features], clf.feature_importances_))\n",
    "list(zip(train2[features2], clf2.feature_importances_))\n",
    "\n",
    "#Test Comment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
