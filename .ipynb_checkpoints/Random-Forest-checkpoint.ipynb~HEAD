{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train_x Shape ::  (250, 11)\n",
      "Train_y Shape ::  (250,)\n",
      "Test_x Shape ::  (250, 11)\n",
      "Test_y Shape ::  (250,)\n",
      "Trained model ::  RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
      "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
      "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
      "            min_samples_leaf=1, min_samples_split=2,\n",
      "            min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=1,\n",
      "            oob_score=False, random_state=None, verbose=0,\n",
      "            warm_start=False)\n",
      "Actual outcome :: 5 and Predicted outcome :: 5\n",
      "Actual outcome :: 5 and Predicted outcome :: 5\n",
      "Actual outcome :: 2 and Predicted outcome :: 2\n",
      "Actual outcome :: 1 and Predicted outcome :: 1\n",
      "Actual outcome :: 5 and Predicted outcome :: 5\n",
      "Train Accuracy ::  0.996\n",
      "Test Accuracy  ::  0.908\n",
      " Confusion matrix  [[ 25   2   0   0   3]\n",
      " [  0  32   0   0   0]\n",
      " [  4   6  13   0   3]\n",
      " [  0   0   0  47   5]\n",
      " [  0   0   0   0 110]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8478d7b0d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8478b70690>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#create dataframe from yelp csv \n",
    "input_file = \"yelp_reviews_min_test.csv\"\n",
    "dataset = pd.read_csv(input_file)\n",
    "headers = list(dataset.columns)\n",
    "feature_headers = headers[0:-1]\n",
    "target_header = headers[-1]\n",
    "\n",
    "# Split dataset into train and test dataset\n",
    "train_x, test_x, train_y, test_y = train_test_split(dataset[feature_headers], dataset[target_header],\n",
    "                                                        train_size=0.5)\n",
    "\n",
    " # Train and Test dataset size details\n",
    "print \"Train_x Shape :: \", train_x.shape\n",
    "print \"Train_y Shape :: \", train_y.shape\n",
    "print \"Test_x Shape :: \", test_x.shape\n",
    "print \"Test_y Shape :: \", test_y.shape\n",
    "\n",
    "clf = RandomForestClassifier()\n",
    "clf.fit(train_x, train_y)\n",
    "\n",
    "print \"Trained model :: \", clf\n",
    "\n",
    "predictions = clf.predict(test_x)\n",
    " \n",
    "for i in xrange(0, 5):\n",
    "    print \"Actual outcome :: {} and Predicted outcome :: {}\".format(list(test_y)[i], predictions[i])\n",
    "    \n",
    "# Train and Test Accuracy\n",
    "print \"Train Accuracy :: \", accuracy_score(train_y, clf.predict(train_x))\n",
    "print \"Test Accuracy  :: \", accuracy_score(test_y, predictions)\n",
    "print \" Confusion matrix \", confusion_matrix(test_y, predictions)\n",
    "\n",
    "#rating_range = list(range(1, 6))\n",
    "#print(rating_range)\n",
    "#cm = pd.DataFrame(confusion_matrix(test_y, predictions))\n",
    "#plt.figure(figsize=(8, 6))\n",
    "#sns.heatmap(cm, annot=True)\n",
    "#plt.show()\n",
    "\n",
    "importances = clf.feature_importances_\n",
    "indices = np.argsort(importances)\n",
    "features = dataset.columns[0:-1]\n",
    "plt.figure(1)\n",
    "plt.title('Feature Importances')\n",
    "plt.barh(range(len(indices)), importances[indices], color='b', align='center')\n",
    "plt.yticks(range(len(indices)), features[indices])\n",
    "plt.xlabel('Relative Importance')\n",
    "plt.figure(figsize=(10, 8))\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
